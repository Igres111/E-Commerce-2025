@using E_Commerce_2025_Web.DTOs
@model List<Product>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<h1 class="my-4 text-center">Products</h1>

<div class="container">
    <div id="products-list" class="row g-3">
        @foreach (var product in Model)
        {
            <div id="product-@product.Id"
                 class="col-md-4"
                 data-category-ids="@string.Join(',', product.CategoryIds ?? new List<Guid>())"
                 data-sku="@product.SKU"
                 data-color="@product.Color"
                 data-size="@product.Size">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Price: @product.Price.ToString("C")</li>
                        <li class="list-group-item">Stock: @product.StockQuantity</li>
                    </ul>
                    <div class="card-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-sm btn-secondary edit-btn" data-id="@product.Id">Edit</button>
                        <button type="button" class="btn btn-sm btn-danger delete-btn" data-id="@product.Id">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="text-center my-4">
        <button id="create-btn" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#create-modal">Create</button>
    </div>
</div>

<div class="modal fade" id="edit-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="edit-form">
                <input type="hidden" name="ProductId" />
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">CategoryId</label>
                        <input type="text" name="CategoryId" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" name="Name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" name="Description" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" step="0.01" name="Price" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">StockQuantity</label>
                        <input type="number" name="StockQuantity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">SKU</label>
                        <input type="text" name="SKU" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input type="text" name="Color" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Size</label>
                        <input type="text" name="Size" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="create-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="create-form">
                <div class="modal-header">
                    <h5 class="modal-title">Create Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">CategoryId</label>
                        <input type="text" name="CategoryId" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" name="Name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <input type="text" name="Description" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <input type="number" step="0.01" name="Price" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">StockQuantity</label>
                        <input type="number" name="StockQuantity" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">SKU</label>
                        <input type="text" name="SKU" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Color</label>
                        <input type="text" name="Color" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Size</label>
                        <input type="text" name="Size" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancel-create">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
          .withUrl("https://localhost:7077/hubs/inventory", { transport: signalR.HttpTransportType.WebSockets })
          .withAutomaticReconnect()
          .build();

        connection.start()
          .then(() => console.log("SignalR connected"))
          .catch(err => console.error("SignalR failed:", err));

        connection.on("ProductAdded", product => {
          const html = `
            <div id="product-${product.id}" class="col-md-4"
                 data-category-ids="${product.categoryIds?.join(',')}"
                 data-sku="${product.sku}"
                 data-color="${product.color}"
                 data-size="${product.size}">
              <div class="card h-100">
                <div class="card-body">
                  <h5 class="card-title">${product.name}</h5>
                  <p class="card-text">${product.description}</p>
                </div>
                <ul class="list-group list-group-flush">
                  <li class="list-group-item">Price: $${product.price.toFixed(2)}</li>
                  <li class="list-group-item">Stock: ${product.stockQuantity}</li>
                </ul>
                <div class="card-footer d-flex justify-content-between">
                  <button type="button" class="btn btn-sm btn-secondary edit-btn" data-id="${product.id}">Edit</button>
                  <button type="button" class="btn btn-sm btn-danger delete-btn" data-id="${product.id}">Delete</button>
                </div>
              </div>
            </div>`;
          const container = document.querySelector(".text-center.my-4");
          container.insertAdjacentHTML("beforebegin", html);
        });

        connection.on("ProductUpdated", product => {
          const card = document.getElementById("product-" + product.id);
          if (!card) return;
          card.dataset.categoryIds = product.categoryIds?.join(",") ?? "";
          card.dataset.sku         = product.sku;
          card.dataset.color       = product.color;
          card.dataset.size        = product.size;
          card.querySelector(".card-title").textContent = product.name;
          card.querySelector(".card-text").textContent  = product.description;
          const items = card.querySelectorAll(".list-group-item");
          items[0].textContent = "Price: $" + product.price.toFixed(2);
          items[1].textContent = "Stock: "  + product.stockQuantity;
        });

        document.getElementById("products-list").addEventListener("click", e => {
          if (e.target.matches(".edit-btn")) {
            const id = e.target.dataset.id;
            const card = document.getElementById("product-" + id);
            const modalEl = document.getElementById("edit-modal");
            const form = modalEl.querySelector("form");

            form.ProductId.value    = id;
            form.CategoryId.value   = card.dataset.categoryIds;
            form.Name.value         = card.querySelector(".card-title").textContent;
            form.Description.value  = card.querySelector(".card-text").textContent;

            const items = card.querySelectorAll(".list-group-item");
            form.Price.value        = parseFloat(items[0].textContent.replace(/[^0-9.]/g, ""));
            form.StockQuantity.value= parseInt(items[1].textContent.replace(/[^0-9]/g, ""));

            form.SKU.value   = card.dataset.sku;
            form.Color.value = card.dataset.color;
            form.Size.value  = card.dataset.size;

            new bootstrap.Modal(modalEl).show();
          }

          if (e.target.matches(".delete-btn")) {
            const id = e.target.dataset.id;
            if (!confirm("Delete this product?")) return;
            fetch(`https://localhost:7077/api/Product/${id}`, { method: "DELETE" })
              .then(res => res.ok && document.getElementById("product-" + id)?.remove());
          }
        });

        document.getElementById("edit-form").onsubmit = async e => {
          e.preventDefault();
          const f = e.target;
          const raw = f.CategoryId.value.trim();
          const categoryIds = raw === "" ? null : raw.split(",").map(x => x.trim());
          const dto = {
            ProductId:      f.ProductId.value,
            CategoryId:     categoryIds,
            Name:           f.Name.value,
            Description:    f.Description.value,
            Price:          parseFloat(f.Price.value),
            StockQuantity:  parseInt(f.StockQuantity.value),
            SKU:            f.SKU.value,
            Color:          f.Color.value,
            Size:           f.Size.value
          };
          await fetch("https://localhost:7077/api/Product", {
            method:  "PUT",
            headers: { "Content-Type": "application/json" },
            body:    JSON.stringify(dto)
          });
          bootstrap.Modal.getInstance(document.getElementById("edit-modal")).hide();
        };

        document.getElementById("create-form").onsubmit = async e => {
          e.preventDefault();
          const f = e.target;
          const raw = f.CategoryId.value.trim();
          const categoryIds = raw === "" ? null : raw.split(",").map(x => x.trim());
          const dto = {
            CategoryId:    categoryIds,
            Name:          f.Name.value,
            Description:   f.Description.value,
            Price:         parseFloat(f.Price.value),
            StockQuantity: parseInt(f.StockQuantity.value),
            SKU:           f.SKU.value,
            Color:         f.Color.value,
            Size:          f.Size.value
          };
          const res = await fetch("https://localhost:7077/api/Product/add", {
            method:  "POST",
            headers: { "Content-Type": "application/json" },
            body:    JSON.stringify(dto)
          });
          if (res.ok) {
            f.reset();
            bootstrap.Modal.getInstance(document.getElementById("create-modal")).hide();
          } else {
            alert("Failed to create product");
          }
        };
    </script>
}
